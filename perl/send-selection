#!/usr/bin/env perl
# Send the current X-selection to a command.
# Allows editing the selection and prompts for a command.
#
# FIXME: Newlines are currently removed from the end of *any* selection, the
# piping process needs a bit of work.

use IPC::Cmd qw(can_run run run_forked);
use Getopt::Long;
use Pod::Usage;

my $zenity = can_run('zenity') or die 'zenity is not installed!';

sub get_selection {
    my ($selection_command, $selection, $prompt) = @_;
    unless ($selection) {
        my $sel = $selection || run_forked($selection_command);
        chomp ($selection = $sel->{stdout});
    } else {
        return $selection unless $prompt;
    }
    my $modified = run_forked(
        "$zenity --text-info --title 'Selection' --editable",
        { child_stdin => $selection, },
    );
    chomp (my $out = $modified->{stdout});
    return $out;
}

sub get_program {
    my ($cmd, $prompt) = @_;
    return $cmd if $cmd && !$prompt;
    my $prog;
    run(
        command => "$zenity --entry --title 'Command' " .
            qq{--text 'Enter command:' --entry-text='$cmd'},
        buffer => \$prog,
    );
    chomp $prog;
    return $prog;
}

sub run_program {
    my ($program, $selection, $silence) = @_;
    run_forked($program, {
        child_stdin => $selection,
        stdout_handler => !$silence && sub { print STDOUT $_[0] },
        stderr_handler => !$silence && sub { print STDERR $_[0] },
    });
}

sub check_command {
    my ($cmd) = @_;
    my ($cname, $crest) = $cmd =~ /^(\S+)(.*?)$/;
    if (my $path = can_run($cname)) {
        return "$path$crest";
    } else {
        print STDERR "cannot find $cname in path\n" and exit 1;
    }
}

# The main program
sub send_selection {
    my %options = @_;
    my $selection_command = check_command(
        $options{'selection-command'} || 'sselp'
    );
    my $should_prompt_command = $options{'prompt-command'} ||
        !$options{command};
    my $should_prompt_selection = $options{'prompt-selection'} ||
        !$options{selection};

    my $selection = get_selection(
        $selection_command,
        $options{selection},
        $should_prompt_selection
    );
    exit 1 unless $selection;
    my $command   = get_program($options{command}, $should_prompt_command);
    exit 1 unless $command;
    run_program($command, $selection, $options{silence});
}

sub print_version {
    pod2usage(-exitval => 0, -verbose => 99, -sections => 'VERSION');
}

my %cl_options;
GetOptions(\%cl_options,
    "command=s",
    "help|?",
    "man",
    "prompt-command",
    "prompt-selection",
    "selection=s",
    "selection-command=s",
    "silence",
    "version",
) or pod2usage(2);

pod2usage(1) if $cl_options{help};
pod2usage(-exitval => 0, -verbose => 2) if $cl_options{man};
print_version() if $cl_options{version};

send_selection(%cl_options);

__END__

=head1 NAME

send-selection - Send the X-selection to a program

=head1 VERSION

version 0.1.0

=head1 SYNOPSIS

send-selection [options]

=head1 OPTIONS

=over

=item B<--command>=I<string>

Use I<string> as the command for processing the text and don't prompt the user.
In conjunction with B<--prompt-command> this uses I<string> as the default
text.

=item B<--help>

Print a brief help message and exit.

=item B<--man>

Display the manual page and exit.

=item B<--prompt-command>

Prompt the user for a command regardless of other flags.

=item B<--prompt-selection>

Prompt the user to edit the selection regardless of other flags.

=item B<--selection>=I<string>

Use I<string> as the selection and don't prompt the user. In conjunction with
B<--prompt-selection> this uses I<string> as the default selection and allows
editing.

If both B<--selection> and B<--selection-command> are specified only
B<--selection> will be used.

=item B<--selection-command>=I<string>

Use I<string> as the command for retrieving the initial text rather than
B<sselp> (the default).

=item B<--silence>

Suppress the standard output and error of the command.

=item B<--version>

Print version information.

=back

=head1 DESCRIPTION

B<send-selection> allows retrieval and interactive modification of the
X-selection before sending it to a command.

=head1 EXAMPLES

Use the current X-clipboard contents rather than the selection (via B<xclip>):

  send-selection --selection-command='xclip -o'

Don't use the selection, instead require the user to enter all the text, then
evaluate the text in python:

  send-selection --selection-command='true' --command='python'

Start with the selection as 'foo' and the command as 'cat', but still prompt:

  send-selection --selection='foo' --command='cat' --prompt-selection --prompt-command

Echo the user's selection twice (on separate lines):

  send-selection --command="xargs -Isel -0 echo -e 'sel\nsel'"

=head1 AUTHOR

Ben Moon C<< <software@guiltydolphin.com> >>

=head1 COPYRIGHT AND LICENSE

Copyright 2016 Ben Moon

Licensed under The GNU General Public License Version 3 which can be found at
L<https://www.gnu.org/licenses/gpl-3.0.txt>

=cut
